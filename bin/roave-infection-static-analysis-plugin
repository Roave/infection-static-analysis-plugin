#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace Roave\InfectionStaticAnalysis\Application;

use Infection\Console\Application;
use Infection\Container;
use PackageVersions\Versions;
use Psalm\Config;
use Psalm\Internal\Analyzer\ProjectAnalyzer;
use Psalm\Internal\IncludeCollector;
use Psalm\Internal\Provider\FileProvider;
use Psalm\Internal\Provider\Providers;
use Psalm\Internal\RuntimeCaches;
use Psalm\Report\ReportOptions;
use Roave\InfectionStaticAnalysis\Bootstrapper;
use Roave\InfectionStaticAnalysis\Psalm\RunStaticAnalysisAgainstMutant;
use UnexpectedValueException;
use function define;
use function defined;
use function getcwd;
use function sprintf;
use function var_export;
use function getenv;

(static function (): void {
    $projectPath = (static function () : string {
        $projectDirectoryCandidates = [
            'current-working-directory'        => getcwd(),
            'installed-as-composer-dependency' => __DIR__ . '/../../..',
            'installed-as-project'             => __DIR__ . '/..',
        ];

        foreach ($projectDirectoryCandidates as $candidatePath) {
            if (! file_exists($candidatePath . '/vendor/autoload.php')) {
                continue;
            }

            return $candidatePath;
        }

        throw new UnexpectedValueException(sprintf(
            'Could not identify project installation path within following paths: %s',
            var_export($projectDirectoryCandidates, true)
        ));
    })();

    require_once $projectPath . '/vendor/autoload.php';

    if (! defined('PSALM_VERSION')) {
        define('PSALM_VERSION', Versions::getVersion('vimeo/psalm'));
    }

    if (! defined('PHP_PARSER_VERSION')) {
        define('PHP_PARSER_VERSION', Versions::getVersion('nikic/php-parser'));
    }

    $makeAnalyzer = static function () use ($projectPath): ProjectAnalyzer {
        RuntimeCaches::clearAll();

        $configDirectory = getenv('PROJECT_CONFIG_DIRECTORY') ?: '';
        $configPath = '' !== $configDirectory ? ($projectPath . '/' . $configDirectory) : $projectPath;

        $config = Config::getConfigForPath($configPath, $projectPath);

        $config->setIncludeCollector(new IncludeCollector());

        return new ProjectAnalyzer(
            $config,
            new Providers(new FileProvider()),
            new ReportOptions()
        );
    };

    (new Application(Bootstrapper::bootstrap(
        Container::create(),
        new RunStaticAnalysisAgainstMutant($makeAnalyzer)
    )))
        ->run();
})();
